version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: event-poc-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - event-poc-network
    restart: unless-stopped

  # Kafka message broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: event-poc-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - event-poc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: event-poc-api
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - FLASK_ENV=production
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC=events.contact_form
      - CORS_ORIGINS=*
    ports:
      - "5001:5000"
    networks:
      - event-poc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mailer Service
  mailer:
    build:
      context: ./mailer-service
      dockerfile: Dockerfile
    container_name: event-poc-mailer
    depends_on:
      kafka:
        condition: service_healthy
      mailhog:
        condition: service_started
    env_file:
      - .env
    networks:
      - event-poc-network
    restart: unless-stopped
    volumes:
      - mailer-logs:/app/logs

  # Workflow Agent
  workflow-agent:
    build:
      context: ./workflow-agent
      dockerfile: Dockerfile
    container_name: event-poc-workflow
    depends_on:
      kafka:
        condition: service_healthy
      api:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC=events.contact_form
      - KAFKA_CONSUMER_GROUP=workflow-agent
      - CRM_API_BASE=http://api:5000/api
      - CRM_API_TIMEOUT=30
    networks:
      - event-poc-network
    restart: unless-stopped
    volumes:
      - workflow-logs:/app/logs

  # Frontend (React + Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: event-poc-frontend
    depends_on:
      - api
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:5001/api
    ports:
      - "3000:80"
    networks:
      - event-poc-network
    restart: unless-stopped

  # Kafka UI for monitoring (optional)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: event-poc-kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    networks:
      - event-poc-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: event-poc-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus-data:/prometheus
    networks:
      - event-poc-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: event-poc-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/var/lib/grafana/dashboards/dashboard.json
    networks:
      - event-poc-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: event-poc-node-exporter
    command:
      - '--path.rootfs=/host'
    ports:
      - "9100:9100"
    volumes:
      - '/:/host:ro,rbind'
    networks:
      - event-poc-network
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: event-poc-cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - event-poc-network
    restart: unless-stopped

  # Kafka Exporter for Kafka metrics
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: event-poc-kafka-exporter
    command:
      - '--kafka.server=kafka:29092'
    ports:
      - "9308:9308"
    networks:
      - event-poc-network
    restart: unless-stopped
    depends_on:
      - kafka
  mailhog:
    image: mailhog/mailhog:latest
    container_name: event-poc-mailhog
    ports:
      - "1025:1025"   # SMTP
      - "8025:8025"   # Web UI
    networks:
      - event-poc-network
    restart: unless-stopped
    platform: linux/amd64

networks:
  event-poc-network:
    driver: bridge
    name: event-poc-network

volumes:
  zookeeper-data:
    name: event-poc-zookeeper-data
  zookeeper-logs:
    name: event-poc-zookeeper-logs
  kafka-data:
    name: event-poc-kafka-data
  mailer-logs:
    name: event-poc-mailer-logs
  workflow-logs:
    name: event-poc-workflow-logs
  prometheus-data:
    name: event-poc-prometheus-data
  grafana-data:
    name: event-poc-grafana-data

